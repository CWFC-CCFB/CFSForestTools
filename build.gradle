/*
 *  Build file for gradle
 */


plugins {
    id 'com.palantir.git-version' version '3.0.0'
}


apply plugin: 'java'
apply plugin: 'eclipse'
apply plugin: 'idea'


java {
  toolchain {
    languageVersion.set(JavaLanguageVersion.of(8))
  }
}

repositories {
	maven {		// sonatype repository
		url "https://repo1.maven.org/maven2/"
	}
    mavenCentral()
}


println "Using java version " + JavaVersion.current()

sourceSets {
    main {    	
        java {
            srcDirs 'src'            
        }
        
        resources {
			srcDirs= ['src']
			exclude '**/*.java'
		}
		
		output.resourcesDir = "$buildDir/classes/java/$name"
    }

    test {
        java {
            srcDirs 'test/src'
        }
                
        resources {
			srcDirs= ['test/src']
			exclude '**/*.java'
		}
		
		output.resourcesDir = "$buildDir/classes/java/$name"
    }               
}

configurations {
	cfsForesttoolsImplementation {
		extendsFrom implementation
		description = 'Main implementation'
		canBeResolved = true
	}
}

dependencies {
    implementation group: 'io.github.cwfc-ccfb', name: 'repicea', version: '[1.10.1,)'    
    implementation group: 'io.github.cwfc-ccfb', name: 'repicea-mathstats', version: '[1.3.3,)'    
    implementation group: 'io.github.cwfc-ccfb', name: 'repicea-simulation', version: '[1.0.11,)'    
    implementation group: 'io.github.cwfc-ccfb', name: 'biosimclient', version: '[1.1.2,)'    
	    
    testImplementation "junit:junit:4.12"    
}

compileJava {
	project.version= gitVersion() 
	println "Building " + rootProject.name + " " + project.version
	println "Installation directory " + "../externallibraries/" + rootProject.name
}

test {
    // show standard out and standard error of the test JVM(s) on the console
    testLogging.showStandardStreams = true

    // set heap size for the test JVM(s)
    maxHeapSize = "2048m"
    
    exclude '**/ProductionEnvironmentTest.class'
}

jar {
	manifest {
        attributes("Built-By": "Mathieu Fortin",
        		   "Specification-Title": "Growth Models for Eastern Canada",
        		   "Specification-Version": archiveVersion,                   
                   "Specification-Vendor": "Canadian Wood Fibre Centre",
                   "Implementation-Title": "mrnfforesttools",
	               "Implementation-Version": archiveVersion,
                   "Implementation-Vendor": "Canadian Wood Fibre Centre",
                   )
    }
    
	into ('/') {
		from files(['./README.md', './LICENSE.md'])			
	}
	
	// include all java files from main sourceset into the jar file (resources are already included)
	from sourceSets.main.allJava		
}

task integrationTest(type: Test) {
	description = 'Runs the integration tests.'
    group = 'verification'
	dependsOn jar
	
	include '**/*.class'
	
	testLogging.showStandardStreams = true
    testClassesDirs = sourceSets.test.output.classesDirs
        
    // set classpath to test classes + test dependencies + JAR
    classpath = project.sourceSets.test.output + configurations.testRuntimeClasspath + files(jar.archiveFile) 
    outputs.upToDateWhen { false }
    mustRunAfter test
    maxHeapSize = "2048m"
}

check.dependsOn integrationTest

task deleteInstallFolder(type: Delete) {
  delete "../externallibraries/" + rootProject.name
}

task install(type: Copy) {
	description = 'Copies the output jar to installation folder.'
	group = 'build'
	dependsOn deleteInstallFolder,integrationTest
	from configurations.cfsForesttoolsImplementation
	from jar
	into "../externallibraries/" + rootProject.name
}
